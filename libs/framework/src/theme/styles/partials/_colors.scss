.icon,
.secondary-text,
i {
    color: rgba(0, 0, 0, .54);
}

.disabled-text,
.hint-text {
    color: rgba(0, 0, 0, .38);
}

.divider {
    color: rgba(0, 0, 0, .12);
}

// Material colors map
$wtf2Palettes: ('primary': $primary, 'accent': $accent, 'warn':$warn, 'red':$wtf2-red, 'pink':$wtf2-pink, 'purple':$wtf2-purple, 'deep-purple':$wtf2-deep-purple, 'indigo':$wtf2-indigo, 'blue':$wtf2-blue, 'light-blue':$wtf2-light-blue, 'cyan':$wtf2-cyan, 'teal': $wtf2-teal, 'green':$wtf2-green, 'light-green':$wtf2-light-green, 'lime':$wtf2-lime, 'yellow':$wtf2-yellow, 'amber':$wtf2-amber, 'orange':$wtf2-orange, 'deep-orange':$wtf2-deep-orange, 'brown':$wtf2-brown, 'grey':$wtf2-grey, 'blue-grey':$wtf2-blue-grey, 'white':$wtf2-white, 'black':$wtf2-black, 'dark':$wtf2-dark);
//Material color hues list
$matHues: 50,
100,
200,
300,
400,
500,
600,
700,
800,
900,
A100,
A200,
A400,
A700;
// Text color levels generator mixin
@mixin generateTextColorLevels($classes, $contrast) {
    // If the contrast is dark...
    @if ($contrast=='dark') {
        // Put down the color classes
        #{$classes} {
            .icon,
            i {
                color: rgba(0, 0, 0, .54);
            }
            &.secondary-text,
            .secondary-text {
                color: rgba(0, 0, 0, .54) !important;
            }
            &.disabled-text,
            &.hint-text,
            .disabled-text,
            .hint-text {
                color: rgba(0, 0, 0, .38) !important;
            }
            &.divider,
            .divider {
                color: rgba(0, 0, 0, .12) !important;
            }
            .wtf2-ripple-element {
                background: rgba(0, 0, 0, .1);
            }
            .adaptive-border-color {
                border-color: rgba(0, 0, 0, .12);
            }
        }
    }
    // If the base text color is white...
    @else {
        // Put down the color classes
        #{$classes} {
            .icon,
            i {
                color: rgba(255, 255, 255, 1);
            }
            &.secondary-text,
            .secondary-text {
                color: rgba(255, 255, 255, .70) !important;
            }
            &.disabled-text,
            &.hint-text,
            .disabled-text,
            .hint-text {
                color: rgba(255, 255, 255, .50) !important;
            }
            &.divider,
            .divider {
                color: rgba(255, 255, 255, .12) !important;
            }
            .wtf2-ripple-element {
                background: rgba(255, 255, 255, .1);
            }
            .adaptive-border-color {
                border-color: rgba(255, 255, 255, .12);
            }
        }
    }
}

@mixin generateMaterialElementColors($classes, $contrast) {
    // If the contrast color is light...
    $wtf2Foreground: (base: white, text: white, hint-text: rgba(white, .5), divider: rgba(white, .12), );
    // If the contrast color is dark...
    @if ($contrast=='dark') {
        $wtf2Foreground: (base: black, hint-text: rgba(black, .38), divider: rgba(black, .12), );
    }
    // Put down the color classes
    #{$classes} {
        // Native Input
        input[type="text"] {
            color: map_get($wtf2Foreground, base);
        }
        // Input
        .wtf2-form-field-label {
            color: map_get($wtf2Foreground, hint-text);
        }
        .wtf2-form-field-underline {
            background-color: map_get($wtf2Foreground, divider);
        }
        // Select
        .wtf2-select-arrow,
        .wtf2-select-trigger {
            color: map_get($wtf2Foreground, hint-text);
        }
        .wtf2-select-underline {
            background-color: map_get($wtf2Foreground, divider);
        }
        .wtf2-select-arrow,
        .wtf2-select-disabled .wtf2-select-value,
        .wtf2-select-trigger {
            color: map_get($wtf2Foreground, hint-text);
        }
        .wtf2-select-content,
        .wtf2-select-panel-done-animating {
            background: map_get($background, card);
        }
        .wtf2-select-value {
            color: map_get($wtf2Foreground, text);
        }
    }
}

// Color classes generator mixin
@mixin generateColorClasses($colorName, $color, $contrastColor, $hue) {
    .#{$colorName}#{$hue}-bg {
        background-color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-bg {
        background-color: $color !important;
        color: $contrastColor !important;
        &[disabled] {
            background-color: rgba($color, .12) !important;
            color: rgba($contrastColor, .26) !important;
        }
    }
    .#{$colorName}#{$hue}-fg {
        color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-fg {
        color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-text {
        color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-border {
        border-color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-border-top {
        border-top-color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-border-right {
        border-right-color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-border-bottom {
        border-bottom-color: $color !important;
    }
    .wtf2-#{$colorName}#{$hue}-border-left {
        border-left-color: $color !important;
    }
    .#{$colorName}#{$hue}-border {
        border-color: $color !important;
    }
    .#{$colorName}#{$hue}-border-top {
        border-top-color: $color !important;
    }
    .#{$colorName}#{$hue}-border-right {
        border-right-color: $color !important;
    }
    .#{$colorName}#{$hue}-border-bottom {
        border-bottom-color: $color !important;
    }
    .#{$colorName}#{$hue}-border-left {
        border-left-color: $color !important;
    }
}

@mixin generatewtf2ColorClasses($primary, $accent, $warn) {
    $palettes: (primary: $primary, accent: $accent, warn: $warn);
    // Define contrast lists
    $light-contrasting-classes: ();
    $dark-contrasting-classes: ();
    // Generate contrasting colors
    @include generateTextColorLevels($dark-contrasting-classes, 'dark');
    @include generateTextColorLevels($light-contrasting-classes, 'light');
    @include generateMaterialElementColors($dark-contrasting-classes, 'dark');
    @include generateMaterialElementColors($light-contrasting-classes, 'light');
    // Generate the color classes...
    @each $paletteName,
    $palette in $palettes {
        // Get the contrasts map
        $contrasts: map-get($palette, 'contrast');
        @each $hue in $matHues {
            // Get the color and the contrasting color
            $color: map-get($palette, $hue);
            $contrast: map-get($contrasts, $hue);
            @if ($color !=null and $contrast !=null) {
                // Generate color classes
                @include generateColorClasses($paletteName, $color, $contrast, '-#{$hue}');
                // If the contrast color is dark
                @if (rgba(black, 1)==rgba($contrast, 1)) {
                    $dark-contrasting-classes: append($dark-contrasting-classes, unquote('.wtf2-#{$paletteName}-#{$hue}-bg'), 'comma');
                }
                // if the contrast color is light
                @else {
                    $light-contrasting-classes: append($light-contrasting-classes, unquote('.wtf2-#{$paletteName}-#{$hue}-bg'), 'comma');
                }
                // Run the generator one more time for default values (500)
                @if ($hue==500) {
                    // Generate color classes
                    @include generateColorClasses($paletteName, $color, $contrast, '');
                    // Add color to the correct list depending on the contrasting color
                    // If the contrast color is dark
                    @if (rgba(black, 1)==rgba($contrast, 1)) {
                        $dark-contrasting-classes: append($dark-contrasting-classes, unquote('.wtf2-#{$paletteName}-bg'), 'comma');
                    }
                    // if the contrast color is light
                    @else {
                        $light-contrasting-classes: append($light-contrasting-classes, unquote('.wtf2-#{$paletteName}-bg'), 'comma');
                    }
                }
            }
        }
    }
}

// Generate the color classes...
// Define contrast lists
$light-contrasting-classes: ();
$dark-contrasting-classes: ();
@each $paletteName,
$palette in $wtf2Palettes {
    // Get the contrasts map
    $contrasts: map-get($palette, 'contrast');
    @each $hue in $matHues {
        // Get the color and the contrasting color
        $color: map-get($palette, $hue);
        $contrast: map-get($contrasts, $hue);
        @if ($color !=null and $contrast !=null) {
            // Generate color classes
            @include generateColorClasses($paletteName, $color, $contrast, '-#{$hue}');
            // Add color to the correct list depending on the contrasting color
            // If the contrast color is dark
            @if (rgba(black, 1)==rgba($contrast, 1)) {
                $dark-contrasting-classes: append($dark-contrasting-classes, unquote('.wtf2-#{$paletteName}-#{$hue}-bg'), 'comma');
            }
            // if the contrast color is light
            @else {
                $light-contrasting-classes: append($light-contrasting-classes, unquote('.wtf2-#{$paletteName}-#{$hue}-bg'), 'comma');
            }
            // Run the generator one more time for default values (500)
            @if ($hue==500) {
                // Generate color classes
                @include generateColorClasses($paletteName, $color, $contrast, '');
                // Add color to the correct list depending on the contrasting color
                // If the contrast color is dark
                @if (rgba(black, 1)==rgba($contrast, 1)) {
                    $dark-contrasting-classes: append($dark-contrasting-classes, unquote('.wtf2-#{$paletteName}-bg'), 'comma');
                }
                // if the contrast color is light
                @else {
                    $light-contrasting-classes: append($light-contrasting-classes, unquote('.wtf2-#{$paletteName}-bg'), 'comma');
                }
            }
        }
    }
}

// Generate contrasting colors
@include generateTextColorLevels($dark-contrasting-classes, 'dark');
@include generateTextColorLevels($light-contrasting-classes, 'light');
@include generateMaterialElementColors($dark-contrasting-classes, 'dark');
@include generateMaterialElementColors($light-contrasting-classes, 'light');