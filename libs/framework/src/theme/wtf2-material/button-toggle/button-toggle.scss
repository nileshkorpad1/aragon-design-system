@import '../core/style/vendor-prefixes';
@import '../core/style/layout-common';
@import '~@angular/cdk/a11y';
$wtf2-button-toggle-standard-padding: 0 12px !default;
$wtf2-button-toggle-standard-height: 48px !default;
$wtf2-button-toggle-standard-border-radius: 4px !default;
$wtf2-button-toggle-legacy-padding: 0 16px !default;
$wtf2-button-toggle-legacy-height: 36px !default;
$wtf2-button-toggle-legacy-border-radius: 2px !default;
.wtf2-button-toggle-standalone,
.wtf2-button-toggle-group {
    position: relative;
    display: inline-flex;
    flex-direction: row;
    white-space: nowrap;
    overflow: hidden;
    border-radius: $wtf2-button-toggle-legacy-border-radius;
    -webkit-tap-highlight-color: transparent;
    @include cdk-high-contrast {
        outline: solid 1px;
    }
}

.wtf2-button-toggle-standalone.wtf2-button-toggle-appearance-standard,
.wtf2-button-toggle-group-appearance-standard {
    border-radius: $wtf2-button-toggle-standard-border-radius;
    @include cdk-high-contrast {
        outline: 0;
    }
}

.wtf2-button-toggle-vertical {
    flex-direction: column;
    .wtf2-button-toggle-label-content {
        // Vertical button toggles shouldn't be an inline-block, because the toggles should
        // fill the available width in the group.
        display: block;
    }
}

.wtf2-button-toggle {
    white-space: nowrap;
    position: relative;
    // Fixes SVG icons that get thrown off because of the `vertical-align` on the parent.
    .wtf2-icon svg {
        vertical-align: top;
    }
    &.cdk-keyboard-focused {
        .wtf2-button-toggle-focus-overlay {
            opacity: 1;
            // In high contrast mode `opacity: 1` will show the overlay as solid so we fall back 0.5.
            @include cdk-high-contrast {
                opacity: 0.5;
            }
        }
    }
}

.wtf2-button-toggle-appearance-standard {
    &:not(.wtf2-button-toggle-disabled):hover .wtf2-button-toggle-focus-overlay {
        opacity: 0.04;
    }
    // Similar to components like the checkbox, slide-toggle and radio, we cannot show the focus
    // overlay for `.cdk-program-focused` because mouse clicks on the <label> element would be always
    // treated as programwtf2ic focus. Note that it needs the extra `:not` in order to have more
    // specificity than the `:hover` above.
    // TODO(paul): support `program` as well. See https://github.com/angular/components/issues/9889
    &.cdk-keyboard-focused:not(.wtf2-button-toggle-disabled) .wtf2-button-toggle-focus-overlay {
        opacity: 0.12;
        @include cdk-high-contrast {
            opacity: 0.5;
        }
    }
    // On touch devices the hover state will linger on the element after the user has tapped.
    // Disable it, because it can be confused with focus. We target the :hover state explicitly,
    // because we still want to preserve the keyboard focus state for hybrid devices that have
    // a keyboard and a touchscreen.
    @media (hover: none) {
        &:not(.wtf2-button-toggle-disabled):hover .wtf2-button-toggle-focus-overlay {
            display: none;
        }
    }
}

.wtf2-button-toggle-label-content {
    @include user-select(none);
    display: inline-block;
    line-height: $wtf2-button-toggle-legacy-height;
    padding: $wtf2-button-toggle-legacy-padding;
    // Prevents IE from shifting the content on click.
    position: relative;
    .wtf2-button-toggle-appearance-standard & {
        line-height: $wtf2-button-toggle-standard-height;
        padding: $wtf2-button-toggle-standard-padding;
    }
}

.wtf2-button-toggle-label-content>* {
    vertical-align: middle;
}

// Overlay to be used as a tint.
.wtf2-button-toggle-focus-overlay {
    border-radius: inherit;
    // Disable pointer events to prevent it from hijacking user events.
    pointer-events: none;
    opacity: 0;
    @include wtf2-fill;
    .wtf2-button-toggle-checked & {
        border-bottom: solid $wtf2-button-toggle-legacy-height;
        // Changing the background color for the selected item won't be visible in high contrast mode.
        // We fall back to using the overlay to draw a brighter, semi-transparent tint on top instead.
        // It uses a border, because the browser will render it using a brighter color.
        @include cdk-high-contrast {
            opacity: 0.5;
            height: 0;
        }
    }
}

@include cdk-high-contrast {
    .wtf2-button-toggle-checked {
        &.wtf2-button-toggle-appearance-standard .wtf2-button-toggle-focus-overlay {
            border-bottom: solid $wtf2-button-toggle-standard-height;
        }
    }
}

// Increase specificity because ripple styles are part of the `wtf2-core` mixin and can
// potentially overwrite the absolute position of the container.
.wtf2-button-toggle .wtf2-button-toggle-ripple {
    @include wtf2-fill;
    // Disable pointer events for the ripple container, because the container will overlay the user
    // content and we don't want to prevent mouse clicks that should toggle the state.
    // Pointer events can be safely disabled because the ripple trigger element is the label element.
    pointer-events: none;
}

.wtf2-button-toggle-button {
    border: 0;
    background: none;
    color: inherit;
    padding: 0;
    margin: 0;
    font: inherit;
    outline: none;
    width: 100%; // Stretch the button in case the consumer set a custom width.
    cursor: pointer;
    .wtf2-button-toggle-disabled & {
        cursor: default;
    }
    // Remove the extra focus outline that is added by Firefox on native buttons.
    &::-moz-focus-inner {
        border: 0;
    }
}
