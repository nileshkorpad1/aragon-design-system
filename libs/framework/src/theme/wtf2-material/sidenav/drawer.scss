@import '../core/style/variables';
@import '../core/style/layout-common';
@import '../core/style/vendor-prefixes';
@import '~@angular/cdk/a11y';
$wtf2-drawer-content-z-index: 1;
$wtf2-drawer-side-drawer-z-index: 2;
$wtf2-drawer-backdrop-z-index: 3;
$wtf2-drawer-over-drawer-z-index: 4;
// stylelint-disable max-line-length
// Mixin that creates a new stacking context.
// see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
// stylelint-enable
@mixin wtf2-drawer-stacking-context($z-index: 1) {
    position: relative;
    // Use a z-index to create a new stacking context. (We can't use transform because it breaks fixed
    // positioning inside of the transformed element).
    z-index: $z-index;
}

.wtf2-drawer-container {
    // We need a stacking context here so that the backdrop and drawers are clipped to the
    // Wtf2DrawerContainer. This creates a new z-index stack so we use low numbered z-indices.
    // We create another stacking context in the '.wtf2-drawer-content' and in each drawer so that
    // the application content does not get messed up with our own CSS.
    @include wtf2-drawer-stacking-context();
    box-sizing: border-box;
    -webkit-overflow-scrolling: touch;
    // Need this to take up space in the layout.
    display: block;
    // Hide the drawers when they're closed.
    overflow: hidden;
    // TODO(hansl): Update this with a more robust solution.
    &[fullscreen] {
        @include wtf2-fill();
        &.wtf2-drawer-opened {
            overflow: hidden;
        }
    }
    // When the consumer explicitly enabled the backdrop,
    // we have to pull the side drawers above it.
    &.wtf2-drawer-container-explicit-backdrop .wtf2-drawer-side {
        z-index: $wtf2-drawer-backdrop-z-index;
    }
    // Note that the `NoopAnimationsModule` is being handled inside of the component code.
    &.ng-animate-disabled,
    .ng-animate-disabled & {
        .wtf2-drawer-backdrop,
        .wtf2-drawer-content {
            transition: none;
        }
    }
}

.wtf2-drawer-backdrop {
    @include wtf2-fill();
    display: block;
    // Because of the new stacking context, the z-index stack is new and we can use our own
    // numbers.
    z-index: $wtf2-drawer-backdrop-z-index;
    // We use 'visibility: hidden | visible' because 'display: none' will not animate any
    // transitions, while visibility will interpolate transitions properly.
    // see https://developer.mozilla.org/en-US/docs/Web/CSS/visibility, the Interpolation
    // section.
    visibility: hidden;
    &.wtf2-drawer-shown {
        visibility: visible;
    }
    .wtf2-drawer-transition & {
        transition: {
            duration: $swift-ease-out-duration;
            timing-function: $swift-ease-out-timing-function;
            property: background-color, visibility;
        }
    }
    @include cdk-high-contrast {
        opacity: 0.5;
    }
}

.wtf2-drawer-content {
    @include wtf2-drawer-stacking-context($wtf2-drawer-content-z-index);
    display: block;
    height: 100%;
    overflow: auto;
    .wtf2-drawer-transition & {
        transition: {
            duration: $swift-ease-out-duration;
            timing-function: $swift-ease-out-timing-function;
            property: transform, margin-left, margin-right;
        }
    }
}

.wtf2-drawer {
    $high-contrast-border: solid 1px currentColor;
    @include wtf2-drawer-stacking-context($wtf2-drawer-over-drawer-z-index);
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 3;
    outline: 0;
    box-sizing: border-box;
    overflow-y: auto; // TODO(kara): revisit scrolling behavior for drawers
    transform: translate3d(-100%, 0, 0);
    &,
    [dir='rtl'] &.wtf2-drawer-end {
        @include cdk-high-contrast {
            border-right: $high-contrast-border;
        }
    }
    [dir='rtl'] &,
    &.wtf2-drawer-end {
        @include cdk-high-contrast {
            border-left: $high-contrast-border;
            border-right: none;
        }
    }
    &.wtf2-drawer-side {
        z-index: $wtf2-drawer-side-drawer-z-index;
    }
    &.wtf2-drawer-end {
        right: 0;
        transform: translate3d(100%, 0, 0);
    }
    [dir='rtl'] & {
        transform: translate3d(100%, 0, 0);
        &.wtf2-drawer-end {
            left: 0;
            right: auto;
            transform: translate3d(-100%, 0, 0);
        }
    }
}

// Note that this div isn't strictly necessary on all browsers, however we need it in
// order to avoid a layout issue in Chrome. The issue is that in RTL mode the browser doesn't
// account for the sidenav's scrollbar while positioning, which ends up pushing it partially
// out of the screen. We work around the issue by having the scrollbar be on this inner container.
.wtf2-drawer-inner-container {
    width: 100%;
    height: 100%;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

.wtf2-sidenav-fixed {
    position: fixed;
}
